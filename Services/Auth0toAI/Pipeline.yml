trigger:
 batch: true
 branches:
   include:
   - master
 paths:
   include:
   - Services/Auth0toAI
variables:
 - group: Auth0ToApplicationInsight
 - name: workingDirectory
   value: '$(Build.SourcesDirectory)/Services/Auth0toAI'
 - name: vmImageName
   value: 'windows-2022'
#  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
 - name: BuildConfiguration
   value: 'release'
 - name: BuildPlatform
   value: 'any cpu'
stages:
- stage: 'Build_Stage' #Stage name cannot have spaces
  displayName: 'Build' #Name displayed when viewing in Azure DevOps
  jobs:
  - job: 'Build_Job' #Job name cannot have spaces
    displayName: 'Build Service' #Name displayed when viewing in Azure DevOps
    pool:
      vmImage: $(vmImageName)
      demands:
      - msbuild
      - visualstudio
      - vstest
    variables:
      - group: Auth0ToApplicationInsight
      - name: NUGET_PACKAGES
        value: $(Pipeline.Workspace)/.nuget/packages
    steps:
    - task: NuGetToolInstaller@1
      displayName: 'Use NuGet 6.x'
      inputs:
       versionSpec: 6.x      
    - task: UseDotNet@2
      displayName: Use .Net Core sdk 6.0.x
      inputs:
        packageType: 'sdk'
        version: '6.0.x'
    # - task: Cache@2
    #   displayName: Cache
    #   inputs:
    #    key: 'nuget | "$(Agent.OS)" | **/packages.lock.json,!**/bin/**,!**/obj/**'
    #    restoreKeys: |
    #      nuget | "$(Agent.OS)"
    #      nuget
    #    path: '$(NUGET_PACKAGES)'
    #    cacheHitVar: 'CACHE_RESTORED'
    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      inputs:
       restoreSolution: '$(workingDirectory)/Auth0toAI.sln'
    - task: VSBuild@1
      displayName: 'Build solution'
      inputs:
       solution: '$(workingDirectory)/Auth0toAI.sln'
       vsVersion: "17.0"
       platform: '$(BuildPlatform)'
       configuration: '$(BuildConfiguration)'
       clean: true
       maximumCpuCount: true
    # - task: VSBuild@1
    #   displayName: 'Build solution COPY for tests'
    #   inputs:
    #    solution: '$(workingDirectory)/Auth0toAI.sln'
    #    vsVersion: '17.0'
    #    platform: '$(BuildPlatform)'
    #    configuration: '$(BuildConfiguration)'
    #    maximumCpuCount: true

    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish'
      inputs:
       command: publish
       publishWebProjects: false
       projects: '$(workingDirectory)/Auth0toAI/Auth0toAI.csproj'
       arguments: '-o "$(build.artifactstagingdirectory)/Auth0toAI" --configuration $(BuildConfiguration) --no-build'

    - task: Bash@3
      displayName: Install Azurite
      inputs:
       targetType: 'inline'
       script: |
         npm install -g azurite
         mkdir azurite
         azurite --silent --location azurite --debug azurite\debug.log &

    - task: PublishSymbols@2
      displayName: 'Publish symbols path'
      inputs:
       SymbolServerType: TeamServices
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
    - task: AzureResourceManagerTemplateDeployment@3
      inputs:
       deploymentScope: 'Resource Group'
       azureResourceManagerConnection: '$(azureResurceManagerConnection)'
       subscriptionId: '$(subscriptionId)'
       action: 'Create Or Update Resource Group'
       resourceGroupName: $(resourceGroup)
       location: '$(location)'
       templateLocation: 'Linked artifact'
       csmFile: '$(workingDirectory)/ARM/Deploy.json'
       deploymentMode: 'Validation'
       deploymentName: 'Auth0ToApplicationInsight'
       overrideParameters: >-
        -eventGridTopicName $(eventGridTopicName) -eventGridSubscriptionName $(eventGridSubscriptionName) -functionName $(functionName)

#- ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
#- ${{ if true }}:
- stage: ProdEnv_Stage
  displayName: Prod Deploy Service
  dependsOn: Build_Stage
    #condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
    - deployment: ProdEnv_Deploy
      displayName: 'Prod Deploy Service'
      environment: Auth0ToApplicationInsight
      variables:
      - group: Auth0ToApplicationInsight
      # resourceGroup: 'KtE-PROD-FORECASTGAS-RG'
      # subscription: 'DevOps_Subscription'
      - name: deploymentName
        value: 'Auth0ToApplicationInsight'
      pool:
        vmImage: $(vmImageName)
      strategy:
        runOnce:
          deploy:
            steps:
            - task: ARM Outputs@6
              displayName: 'ARM Outputs'
              inputs:
                ConnectedServiceNameSelector: 'ConnectedServiceNameARM'
                ConnectedServiceNameARM: '$(azureResurceManagerConnection)'
                resourceGroupName: $(resourceGroup)
                prefix: 'arm.'
                whenLastDeploymentIsFailed: 'latestSuccesful'
                deploymentNameFilter: '$(deploymentName)*'
            # - task: AzureAppServiceManage@0
            #   displayName: 'Stop Workflow Worker'
            #   inputs:
            #     azureSubscription: '$(azureResurceManagerConnection)'
            #     Action: 'Stop Azure App Service'
            #     WebAppName: '$(arm.workerForecastGasWorkFlowName)'
            - task: AzureFunctionApp@1
              displayName: 'Azure functions Scheduler Deploy'
              inputs:
                azureSubscription: '$(azureResurceManagerConnection)'
                appType: functionApp
                appName: $(arm.auth0ToApplicationInsightFunctionName)
                package: '$(Pipeline.Workspace)/drop/Auth0toAI/Auth0toAI.zip'
            # - task: SqlAzureDacpacDeployment@1
            #   displayName: 'Ensure roleForecastGasUser AADGroup is associated to AppRole'
            #   inputs:
            #     azureSubscription: '${{ variables.subscription }}'
            #     ServerName: '$(arm.serverFQDN)'
            #     DatabaseName: '$(arm.databaseName)'
            #     AuthenticationType: servicePrincipal
            #     deployType: InlineSqlTask
            #     SqlInline: |
            #       -- create user would fail if exists
            #       IF NOT EXISTS(SELECT principal_id FROM sys.database_principals WHERE name = 'roleForecastGasUser') BEGIN
            #           CREATE USER [roleForecastGasUser] FROM EXTERNAL PROVIDER
            #       END

            #       EXEC('ALTER ROLE [ForecastGasUser] ADD MEMBER [roleForecastGasUser]')
            # deploy.json create azure function subscription
            - task: AzureResourceManagerTemplateDeployment@3
              inputs:
                deploymentScope: 'Resource Group'
                azureResourceManagerConnection: '$(azureResurceManagerConnection)'
                subscriptionId: '$(subscriptionId)'
                action: 'Create Or Update Resource Group'
                resourceGroupName: $(resourceGroup)
                location: '$(location)'
                templateLocation: 'Linked artifact'
                csmFile: '$(workingDirectory)/ARM/Deploy.json'
                deploymentMode: 'Validation'
                deploymentName: 'Auth0ToApplicationInsightFunctionDeploy'
                overrideParameters: >-
                  -eventGridTopicName $(eventGridTopicName) -eventGridSubscriptionName $(eventGridSubscriptionName) -functionName $(functionName)



            # - task: AzureAppServiceManage@0
            #   displayName: 'Start FTPWatcher'
            #   inputs:
            #     azureSubscription: '${{ variables.subscription }}'
            #     Action: 'Start Azure App Service'
            #     WebAppName: '$(arm.workerFtpWatcherName)'
            # - task: AzureAppServiceManage@0
            #   displayName: 'Start Workflow Worker'
            #   inputs:
            #     azureSubscription: '${{ variables.subscription }}'
            #     Action: 'Start Azure App Service'
            #     WebAppName: '$(arm.workerForecastGasWorkFlowName)'